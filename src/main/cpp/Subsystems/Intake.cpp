// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Intake.h"
#include "Commands/TeleopIntake.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

/**
 * @brief Construct a new Intake:: Intake object
 * 
 * 1. Initialize left and right talon motor controllers
 * 2. Initialize left and right servos (for raising or lowering the intake)
 */
Intake::Intake() : frc::Subsystem("Intake") {
    talonLeftArm.reset(new WPI_TalonSRX(7));
    talonRightArm.reset(new WPI_TalonSRX(6));
    servoLeft.reset(new frc::Servo(0));
    AddChild("Servo Left", servoLeft);
    servoRight.reset(new frc::Servo(1));
    AddChild("Servo Right", servoRight);

    // Digital servos have 0.5 to 2.45 msec pwm range
//    servoLeft->SetBounds(2.2, 0.0, 0.0, 0.0, 0.9);
//    servoRight->SetBounds(2.2, 0.0, 0.0, 0.0, 0.9);
    IntakeUp();
}

/**
 * @brief Set the default command for the Intake subsystem.
 * 
 */
void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

/**
 * @brief Function to be run periodically from the Intake subsystem.
 * 
 * Updates motor safety timeouts.
 */
void Intake::Periodic() {
    // Put code here to be run every loop

    talonLeftArm->Feed();
    talonRightArm->Feed();
    frc::SmartDashboard::PutBoolean("Intake Up", IsIntakeUp());
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

/**
 * @brief Sets the percent outputs for the talons to 0.0.
 */
void Intake::IntakeOff() 
{
    talonLeftArm->Set(0.0);
    talonRightArm->Set(0.0);
}

/**
 * @brief Run the intake at full percent output (1.0).
 * 
 */
void Intake::IntakeOn()
{
    IntakeOn(1.0);
}
/**
 * @brief Run the intake at speed percent output.
 * 
 * @param speed
 */
void Intake::IntakeOn(double speed) 
{
    talonLeftArm->Set(speed);
    talonRightArm->Set(-speed);

}

/**
 * @brief Runs the intake system in reverse at full percent output (1.0).
 * 
 */
void Intake::OuttakeOn()
{
    OuttakeOn(1.0);
}

/**
 * @brief Run the outtake at speed percent output.
 * 
 * @param speed 
 */
void Intake::OuttakeOn(double speed) 
{
    talonLeftArm->Set(-speed);
    talonRightArm->Set(speed);
}

/**
 * @brief Bring the intake system to an upright position
 * so that the hatch panel arm can be used
 */
void Intake::IntakeUp()
{
    intakeUp = true;
    servoLeft->Set(servoLeftUp);
    servoRight->Set(servoRightUp);
}

/**
 * @brief Bring the intake system to an downwards position
 * so that the cargo intake can be used
 */
void Intake::IntakeDown()
{
    intakeUp = false;
    servoLeft->Set(servoLeftDown);
    servoRight->Set(servoRightDown);
}
