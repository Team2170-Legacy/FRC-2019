// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Intake.h"
#include "Commands/TeleopIntake.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : frc::Subsystem("Intake") {
    talonLeftArm.reset(new WPI_TalonSRX(7));
    talonRightArm.reset(new WPI_TalonSRX(6));
    servoLeft.reset(new frc::Servo(0));
    AddChild("Servo Left", servoLeft);
    servoRight.reset(new frc::Servo(1));
    AddChild("Servo Right", servoRight);

    // Digital servos have 0.9 to 2.1 msec pwm range
    servoLeft->SetBounds(0.9, 0.0, 0.0, 0.0, 2.1);
    servoRight->SetBounds(0.9, 0.0, 0.0, 0.0, 2.1);
    IntakeUp();
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Intake::Periodic() {
    // Put code here to be run every loop

    talonLeftArm->Feed();
    talonRightArm->Feed();
    frc::SmartDashboard::PutBoolean("Intake Up", IsIntakeUp());
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Intake::IntakeOff() 
{
    talonLeftArm->Set(0.0);
    talonRightArm->Set(0.0);
}

void Intake::IntakeOn()
{
    IntakeOn(1.0);
}

void Intake::IntakeOn(double speed) 
{
    talonLeftArm->Set(speed);
    talonRightArm->Set(-speed);

}

void Intake::OuttakeOn()
{
    OuttakeOn(1.0);
}

void Intake::OuttakeOn(double speed) 
{
    talonLeftArm->Set(-speed);
    talonRightArm->Set(speed);
}

void Intake::IntakeUp()
{
    intakeUp = true;
    servoLeft->Set(servoLeftUp);
    servoRight->Set(servoRightUp);
}

void Intake::IntakeDown()
{
    intakeUp = false;
    servoLeft->Set(servoLeftDown);
    servoRight->Set(servoRightDown);
}
