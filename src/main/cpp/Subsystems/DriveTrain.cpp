// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/DriveTrain.h"
#include "Commands/TeleopDrive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain"),
                           kGearRatio(frc::Preferences::GetInstance()->GetDouble("Gear Ratio", 5.95)),
                           kWheelDiameter(frc::Preferences::GetInstance()->GetDouble("Wheel Diameter", 6.0))
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    powerDistributionPanel.reset(new frc::PowerDistributionPanel(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    sparkMaxLeftLead.reset(new rev::CANSparkMax(leftLeadDeviceID, rev::CANSparkMax::MotorType::kBrushless));
    sparkMaxLeftFollow.reset(new rev::CANSparkMax(leftFollowDeviceID, rev::CANSparkMax::MotorType::kBrushless));
    sparkMaxRightLead.reset(new rev::CANSparkMax(rightLeadDeviceID, rev::CANSparkMax::MotorType::kBrushless));
    sparkMaxRightFollow.reset(new rev::CANSparkMax(rightFollowDeviceID, rev::CANSparkMax::MotorType::kBrushless));
    analogGyro.reset(new frc::ADXRS450_Gyro());
    differentialDrive.reset(new frc::DifferentialDrive(*sparkMaxLeftLead, *sparkMaxRightLead));
    differentialDrive->SetSafetyEnabled(false);

    // Set follower modes for sparkMax2 and sparkMax4
    sparkMaxLeftFollow->Follow(*sparkMaxLeftLead);
    sparkMaxRightFollow->Follow(*sparkMaxRightLead);
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop
    differentialDrive->FeedWatchdog();
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::TankDrive(double left, double right) {
    differentialDrive->TankDrive(left, right);
}

void DriveTrain::VelocityArcade(double xSpeed, double zRotation, bool squareinputs) {

}

void DriveTrain::VelocityTankDrive(double left, double right, bool squareinputs) {
    
}

double DriveTrain::FPStoRPM(double fps) {
     return fps * kGearRatio * 60.0 * 12.0 / M_PI / kWheelDiameter;
}

double DriveTrain::RPMtoFPS(double rpm) {
    return rpm / kGearRatio / 60.0 / 12.0 * M_PI * kWheelDiameter;
}

double DriveTrain::GetVelocity() {
    return RPMtoFPS(sparkMaxLeftLead->GetEncoder().GetVelocity());
}
