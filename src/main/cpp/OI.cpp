// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/ElevatorInnerPos.h"
#include "Commands/ElevatorOuterPos.h"
#include "Commands/ElevatorRearPos.h"
#include "Commands/InitRobot.h"
#include "Commands/IntakeDown.h"
#include "Commands/IntakeToggle.h"
#include "Commands/IntakeUp.h"
#include "Commands/TeleopDrive.h"
#include "Commands/TeleopElevator.h"
#include "Commands/TeleopIntake.h"
#include "Commands/TeleopOuttake.h"
#include "Commands/VisionDrive.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    pushbuttonPanel.reset(new frc::Joystick(2));
    
    pushButtonBlue3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 8));
    pushButtonBlue3->WhenPressed(new ElevatorOuterPos(20, false));
    pushButtonBlue2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 7));
    pushButtonBlue2->WhenPressed(new ElevatorOuterPos(16, false));
    pushButtonBlue1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 6));
    pushButtonBlue1->WhenPressed(new ElevatorOuterPos(0, false));
    pushButtonRed3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 5));
    pushButtonRed3->WhenPressed(new ElevatorInnerPos(16, false));
    pushButtonRed2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 4));
    pushButtonRed2->WhenPressed(new ElevatorInnerPos(10, false));
    pushButtonRed1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 3));
    pushButtonRed1->WhenPressed(new ElevatorInnerPos(4, false));
    driverJoystick.reset(new frc::Joystick(0));
    

    // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   operatorJoystick.reset(new frc::XboxController(1));

   joystickButtonToggleIntake.reset(new frc::JoystickButton(operatorJoystick.get(), 3));
   joystickButtonToggleIntake->WhenPressed(new IntakeToggle());
   joystickButtonOuttake.reset(new frc::JoystickButton(operatorJoystick.get(), 2));
   joystickButtonOuttake->WhileHeld(new TeleopOuttake());
   joystickButtonIntake.reset(new frc::JoystickButton(operatorJoystick.get(), 1));
   joystickButtonIntake->WhileHeld(new TeleopIntake());
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<frc::Joystick> OI::getPushbuttonPanel() {
   return pushbuttonPanel;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
   
std::shared_ptr<frc::XboxController> OI::getOperatorJoystick() {
   return operatorJoystick;
}
