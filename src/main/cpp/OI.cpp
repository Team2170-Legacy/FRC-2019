// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/ChassisRotate.h"
#include "Commands/ElevatorInnerPos.h"
#include "Commands/ElevatorOuterPos.h"
#include "Commands/ElevatorRearPos.h"
#include "Commands/GotoIntakePosition.h"
#include "Commands/InitRobot.h"
#include "Commands/IntakeDown.h"
#include "Commands/IntakeToggle.h"
#include "Commands/IntakeUp.h"
#include "Commands/PlaceHatch.h"
#include "Commands/TeleopDrive.h"
#include "Commands/TeleopElevator.h"
#include "Commands/TeleopIntake.h"
#include "Commands/TeleopOuttake.h"
#include "Commands/VisionDrive.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/DropHatch.h"
#include "Commands/RaiseRobot.h"
#include "Commands/ClimbHighPlatform.h"
#include "Commands/DriveStraightDistance.h"
#include "Commands/ElevatorInnerOuterPos.h"

OI::OI() {
    // Process operator interface input here.
    pushbuttonPanel.reset(new frc::Joystick(2));
    
    if (Robot::IsPracticeBot()) {
      pushButtonBlue3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 8));
      pushButtonBlue3->WhenPressed(new ElevatorOuterPos(20, false));
      pushButtonBlue2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 7));
      pushButtonBlue2->WhenPressed(new ElevatorOuterPos(16, false));
      pushButtonBlue1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 6));
      pushButtonBlue1->WhenPressed(new ElevatorOuterPos(0, false));
      pushButtonRed3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 5));
      pushButtonRed3->WhenPressed(new ElevatorInnerPos(Robot::elevator->kHatchL3, false));
      pushButtonRed2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 4));
      pushButtonRed2->WhenPressed(new ElevatorInnerPos(Robot::elevator->kHatchL2, false));
      pushButtonRed1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 3));
      pushButtonRed1->WhenPressed(new ElevatorInnerPos(Robot::elevator->kHatchL1, false));
    }
    else {
      pushButtonBlue3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 8));
      pushButtonBlue3->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kCargoL3, Robot::elevator->kHatchL2));
      pushButtonBlue2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 7));
      pushButtonBlue2->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kCargoL2, Robot::elevator->kHatchL2));
      pushButtonBlue1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 6));
      pushButtonBlue1->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kCargoL1, Robot::elevator->kOuterHome));
      pushButtonRed3.reset(new frc::JoystickButton(pushbuttonPanel.get(), 5));
      pushButtonRed3->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kHatchL3, Robot::elevator->kHatchL2));
      pushButtonRed2.reset(new frc::JoystickButton(pushbuttonPanel.get(), 4));
      pushButtonRed2->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kInnerHome, Robot::elevator->kHatchL2));
      pushButtonRed1.reset(new frc::JoystickButton(pushbuttonPanel.get(), 3));
      pushButtonRed1->WhenPressed(new ElevatorInnerOuterPos(Robot::elevator->kHatchL1, Robot::elevator->kOuterHome));
    }

   driverJoystick.reset(new frc::Joystick(0));

    counterClockwiseTurn.reset(new frc::JoystickButton(driverJoystick.get(), 3));
    counterClockwiseTurn->WhileHeld(new ChassisRotate(false));
    clockwiseTurn.reset(new frc::JoystickButton(driverJoystick.get(), 2));
    clockwiseTurn->WhileHeld(new ChassisRotate(true));

    // SmartDashboard Buttons

    if (Robot::IsTankDrive()) {
       driverJoystickRight.reset(new frc::Joystick(3));
    }

   operatorJoystick.reset(new frc::XboxController(1));

   // driver joystick button setups
   joystickDriverButtonHatchDrop.reset(new frc::JoystickButton(driverJoystick.get(), 1));
   joystickDriverButtonHatchDrop->WhenPressed(new DropHatch());
	joystickDriverButtonVisionLock.reset(new frc::JoystickButton(driverJoystick.get(), 2));
   joystickDriverButtonVisionLock->WhenPressed(new VisionDrive());
	joystickDriverButtonClimbHigh.reset(new frc::JoystickButton(driverJoystick.get(), 3));
   joystickDriverButtonClimbHigh->WhenPressed(new ClimbHighPlatform());
	joystickDriverButtonForward.reset(new frc::JoystickButton(driverJoystick.get(), 4));
   joystickDriverButtonForward->WhenPressed(new DriveStraightDistance(2.0));


   if (!Robot::IsPracticeBot()) {
      joystickButtonToggleIntake.reset(new frc::JoystickButton(operatorJoystick.get(), 3));
      joystickButtonToggleIntake->WhenPressed(new IntakeToggle());
      joystickButtonOuttake.reset(new frc::JoystickButton(operatorJoystick.get(), 2));
      joystickButtonOuttake->WhileHeld(new TeleopOuttake());
      joystickButtonIntake.reset(new frc::JoystickButton(operatorJoystick.get(), 1));
      joystickButtonIntake->WhileHeld(new TeleopIntake());
      joystickButtonRaiseRobot.reset(new frc::JoystickButton(operatorJoystick.get(), 4));
      joystickButtonRaiseRobot->WhenPressed(new RaiseRobot());
   }
   else {
      printf("Intake Buttons Bypassed\n");
   }
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<frc::Joystick> OI::getPushbuttonPanel() {
   return pushbuttonPanel;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
   
std::shared_ptr<frc::XboxController> OI::getOperatorJoystick() {
   return operatorJoystick;
}

std::shared_ptr<frc::Joystick> OI::getDriverJoystickRight() {
   return driverJoystickRight;
}
