// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/TeleopElevator.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TeleopElevator::TeleopElevator(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

/**
 * @brief Called just before this Command runs the first time
 */
void TeleopElevator::Initialize() {

}

/**
 * @brief Called repeatedly when this Command is scheduled to run
 * 
 * Read both the y axis on the operator joystick.
 * Then move the inner and outer elevators up/down a given amount (in inches)
 */
void TeleopElevator::Execute() {
    double cmdInner = -Robot::oi->getOperatorJoystick()->GetY(frc::GenericHID::JoystickHand::kLeftHand);
    double cmdOuter = -Robot::oi->getOperatorJoystick()->GetY(frc::GenericHID::JoystickHand::kRightHand);
    bool stopInner = false;
    bool stopOuter = false;

    if (fabs(cmdInner) < 0.2)
    {
        cmdInner = 0.0;
    } 

    if (fabs(cmdOuter) < 0.2)
    {
        cmdOuter = 0.0;
        stopOuter = true;
    } 

    Robot::elevator->SlewInner(cmdInner);
 
    cmdOuter *= 20.0 * 0.05;
    if (stopOuter) {
    }
    else {
        Robot::elevator->SetOuterPosition(Robot::elevator->GetOuterPosInches() + (cmdOuter * 10));
    }
}

/**
 * @brief Make this return true when this Command no longer needs to run execute()
 * 
 * @return false (by default)
 */
bool TeleopElevator::IsFinished() {
    return false;
}

/**
 * @brief Called once after isFinished returns true
 */
void TeleopElevator::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TeleopElevator::Interrupted() {

}
